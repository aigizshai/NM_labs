    class Program
    {
        public static double[,] MatrixMultiple(double[,] matrix, double numb)
        {
            double[,] newMatrix = (double[,])matrix.Clone();
            for (int i = 0; i < matrix.GetLength(0); i++)
            {
                for (int j = 0; j < matrix.GetLength(1); j++)
                    newMatrix[i, j] *= numb;
            }
            return newMatrix;
        }
        public static double[,] MatrixMultiple(double[,] matrixA, double[,] matrixB)
        {
            double sum = 0;
            double[,] newMatrix = new double[matrixA.GetLength(0), matrixA.GetLength(1)];
            for (int i = 0; i < matrixA.GetLength(0); i++)
                for (int j = 0; j < matrixA.GetLength(1); j++)
                {
                    sum = 0;
                    for (int k = 0; k < matrixB.GetLength(0); k++)
                        sum += matrixA[i, k] * matrixB[k, j];

                    newMatrix[i, j] = sum;
                }
            return newMatrix;
        }
        public static double[] MatrixMultiple(double[,] matrix, double[] vector)
        {
            double sum = 0;
            double[] newVector = new double[vector.Length];

            for (int i = 0; i < matrix.GetLength(0); i++)
            {
                sum = 0;
                for (int j = 0; j < matrix.GetLength(0); j++)
                { sum += matrix[i, j] * vector[j]; }
                newVector[i] = sum;
            }
            return newVector;
        }
        public static double[,] GetMatrixE(int n)
        {
            double[,] matrixE = new double[n, n];
            for (int i = 0; i < n; i++)
            {
                matrixE[i, i] = 1;
                for (int j = 0; j < n; j++)
                    if (i != j) matrixE[i, j] = 0;
            }
            return matrixE;
        }

        public static double[,] MatrixDifference(double[,] matrix, double[,] vector)
        {
            double[,] newMatrix = (double[,])matrix.Clone();
            for (int i = 0; i < matrix.GetLength(0); i++)
            {
                for (int j = 0; j < matrix.GetLength(1); j++)
                    newMatrix[i, j] -= vector[i, j];
            }
            return newMatrix;
        }
        public static void ShowMatrix(double[,] matrix)
        {
            for (int j = 0; j < matrix.GetLength(0); j++)
            {
                for (int z = 0; z < matrix.GetLength(1); z++)
                {
                    Console.Write("{0,15}", matrix[j, z]);
                }
                Console.WriteLine();
            }
            Console.WriteLine();
        }

        public static void LeverrierFadeev(double[,] matrix)
        {
            Console.WriteLine("Метод Леверрье-Фадеева:");
            double[,] eMatrix = GetMatrixE(matrix.GetLength(0));
            double[,] oldMatrix = matrix;
            double[,] newMatrix = new double[matrix.GetLength(0), matrix.GetLength(1)];
            double[] p = new double[matrix.GetLength(0)];
            for (int i = 0; i < matrix.GetLength(0); i++)
            {  for (int j = 0; j < matrix.GetLength(1); j++)
                    p[i] += matrix[j, j];
                p[i] /= i + 1;

                newMatrix = MatrixMultiple(eMatrix, p[i]);
                newMatrix = MatrixDifference(matrix, newMatrix);
                matrix = MatrixMultiple(oldMatrix, newMatrix);
            }

            for (int i = 0; i < p.Length; i++)
                Console.WriteLine("p" + i + ":" + p[i]);
        }





   
   
   matrix = np.array([
        [1, -1, -1, 2],
        [2, 3, 0, -4],
        [1, 1, -2, -2],
        [1,1,0,-1]
    ])



procedure Leverre(Matr:TMatr);
var
i,j:integer;
Matr1:TMatr;
S,P:TMas;
begin
SetLength(S,Form 1.StringGrid 1.ColCount-1);
SetLength(P,Form 1.StringGrid 1.ColCount);
Matr1:=Copy(Matr);
For i:=0 to High(S) do
    begin
    s[i]:=0;
    if i<>0 then
    MatrUmn(Matr1,Matr,Matr1,High(S),High(S),High(S));
    for j:=0 to High(s) do
        s[i]:=s[i]+Matr1[j,j];
    end;
    for i:=0 to High(s) do
        begin
        p[i+1]:=s[i];
        for j:=0 to i-1 do
            begin
            p[i+1]:=p[i+1]+p[j+1]*s[i-j-1];
        end;
        p[i+1]:=p[i+1]*(-1/(i+1));
    end;
    p[0]:=1;
    p:=Resh(p);
    SobVect(Matr,p);
end;


Function Copy(Matr:TMatr):TMatr;//копируем матрицу
var
i,j:integer;
Matr1:TMatr;
begin
SetLength(Matr 1,High(Matr)+1 ,High(Matr)+1);
for i:=0 to High(Matr) do
for j:=0 to High(Matr) do
Matr1[i,j] :=Matr[i,j];
result:=Matr1;
end;

procedure MatrUmn(a,b:TMatr;var c:TMatr;n,m,k:integer);//перемножение матриц
var
i,j,l:integer;
s:real;
begin
SetLength(c,n+ 1,k+1);
for i:=0 to n do
begin
for j:=0 to k do
begin
s:=0;
for l:=0 to m do
s:=s+a[i,l]*b[l,j];
c[i,j]:=s;
end;
end;
end;

function Proizv(xar:TMas):TMas;// считает производную многочлена, переданного в массиве
var
i:integer;
proizv:TMas;
begin
SetLength(proizv,High(xar));
for i:=0 to High(xar)-2 do
proizv[i]:=xar[i]*(High(xar)-i);
proizv[High(xar)-1]:=xar[High(xar)-1];
result:=proizv;
end;


Function Delenie(f:TMas;koren:real):TMas;// делит многочлен на одночлен (корень),тем самым уменьшая его степень
var
i:integer;
otv:TMas;
begin
SetLength(otv,High(f)+1);
otv[0]:=f[0];
for i:=1 to High(f) do
otv[i] :=(koren*otv[i-1])+f[i];
result:=otv;
end;


function Podstanovka(xar:TMas;kor:real):real;//подставляет число в многочлен
var
i:integer;
otv:real;
begin
otv:=0;
for i:=0 to High(xar)-1 do
begin
otv:=otv+SQRN(kor,High(xar)-i)*xar[i];
end;
otv:=otv+xar[High(xar)];
result:=otv;
end;


function Resh(xar:TMas):TMas;//находит решение многочлена
var
dx,xn,xn1:real;
i,p:integer;
f1,otv:TMas;
begin
SetLength(otv,High(xar));
p:=High(xar);
for i:=1 to p do
begin
xn:=0.00001;
f1:=(Proizv(xar));
repeat
dx:=-(Podstanovka(xar,xn))/(Podstanovka(f1,xn));
xn1:=dx+xn;
xn:=xn1;
until (abs(dx)<0.00001)or(Podstanovka(xar,xn 1)=0);
xar:=Delenie(xar,xn 1);
SetLength(xar,High(Xar));
otv[i-1]:=xn1;
Form1.StringGrid2.Cells[1,i]:=FloatToStrF(xn1,ffExponent,6,13);
end;
result:=otv;
end;


procedure SobVect(Matr:TMatr;otv:TMas); //находим собственные вектора для собст­венных значений
var
i,k:integer;
Matr1:TMatr;
otv1:TMas;
begin
SetLength(otv 1,High(Matr)+1);
for k:=0 to High(otv)do
begin
Matr1 :=Copy1(Matr);
for i:=0 to High(otv) do
begin
Matr1 [i,i] :=Matr[i,i]-otv[k];
end;
Minim(Matr1);
otv1:=Clear1(otv1);
otv1:=Stup(Matr1);
OutPut(otv1,k+1);
end;
end;
