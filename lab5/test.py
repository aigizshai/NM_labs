import numpy as np

def leverrier(matrix):
    n = len(matrix)
    A = np.array(matrix, dtype=float)
    I = np.eye(n)  # Единичная матрица размера n
    p = [0] * (n + 1)  # Коэффициенты характеристического многочлена
    p[0] = 1  # Задаем p0 = 1
    
    # Начинаем с B0 = A и вычисляем следы для определения коэффициентов
    B = A.copy()  # Матрица B_0 = A

    for k in range(1, n + 1):
        # Вычисляем след матрицы B_{k-1}
        trace_B = np.trace(B)
        
        # Находим коэффициент p_k, используя формулу
        p[k] = -trace_B / k
        
        # Обновляем матрицу B_k для следующей итерации
        B = A @ (B + p[k] * I)

    return p

# Пример использования
matrix = ([
        [1, -1, -1, 2],
        [2, 3, 0, -4],
        [1, 1, -2, -2],
        [1,1,0,-1]
    ])


print("Коэффициенты характеристического многочлена:", leverrier(matrix))
