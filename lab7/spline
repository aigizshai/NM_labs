Program VM_SPLINE;
const
n = 10;
type
Mass = array [1..20] of Real;
const
x : Mass = (1,2,3,4,5,6,7,8,9,10,0,0,0,0,0,0,0,0,0,0);
y : Mass = (2.05,1.94,1.92,1.87,1.77,1.88,1.71,1.60,1.56,1.40,0,0,0,0,0,0,0,0,0,0);
var
a,b,c,d,u,v,z : Mass;
ind : Byte;
xx, s : Real;
i : byte;

//Процедура PROGON решает линейную систему с трехдиагональной *}
 //a2[i]*x2[i-1]-b2[i]*x2[i]+c2[i]*x2[i+1]=d2[i]

Procedure PROGON(a2,b2,c2,d2,u2,v2 : Mass; var X2 : Mass; n2 : Integer);
var
i, j, i1, im, nm, nn : byte;
zz : Real;
begin
a2[1]:= 0;
c2[n2] := 0;
u2[1] := 0;
v2[1] := 0;
for i := 1 to n2 do
begin
i1 := i + 1;
zz := 1/(b2[i]-a2[i]*v2[i]);
v2[i1] := c2[i]*zz;
u2[i1] := (a2[i]*u2[i] - d2[i])*zz;
end;
nm := n2-1;
nn := n +1;
x2[n2] := u2[nn];
for j := 1 to nm do
begin
i := nn - j;
im := i-1;
x2[im] := v2[i]*x2[i]+u2[i];
end;
end;
}
* Программа SPLINE строит кубический сплайн для интерполирования *}
* таблично заданной функции
*}
* n1 - количество узлов интерполяции
*}
* xl - массив размерности n1, содержит узлы интерполяции
*}
* yl - массив размерности nl, содержит значение функции в узлах : }
* a1,b1,c1,d1 - рабочие массивы размерности nl
*}
* u1,v1 - рабочие массивы размерности n1+1
*}
* z1 - массив размерности n1, содержит коэффициенты сплайна
}
* ind1 - указатель режима работы:
*}
* ind1=0 коэффициенты вычисляются
}
* ind1=1 коэффициенты считаются известными
}
*}
* xx1 - точка, в которой вычисляется функция
*
*}
*}
* Содержит обращение к подпрограмме PROGON
*
*}
* Результат:
*}
* s1 - приближенное значение функции в точке xx1
}
===================================================================}
Procedure SPLINE(n1:Byte;x1,y1,a1,b1,c1,d1,u1,v1:Mass;var z1:Mass; xx1:Real;var s:real;ind1:Byte);
var
i, j, nm : Integer;
hj, hj 1, am, al : Real;
t,t1,t2,t12,s1 : Real;
Label M2,M4;
begin
nm := n - 1;
if ind <> 0 then goto M2;
a1[1]:= 0;
b1[1] := -2;
c1[1] := 1;
d1[1] := 3*(y1[2] - y1[1])/(x1[2]-x1[1]);
For j := 2 to nm do
Begin
hj := x1[j+1] - x1[j];
hj 1 := x1[j] - x1[j-1];
am := hj1/(hj1 + hj);
al := 1 - am;
a1[j] = al;
b1[j] = -2;
c1[j] = am;
d1[j] = 3*(am*(y1[j+1]-y1[j])/hj+al*(y1[j]-y1[j-1])/hj1);
end;
a1[1] = 1;
b1[1] = -2;
c1[1] = 0;
d1[1] = 3*(y1[n1] - y1[n1-1])/(x1[n1]-x1[n1-1]);
PROGON(a1,b1,c1,d1,u1,v1,z1,n1);
M2:
For j := 2 to n do
if x1[j] > xx then break;
t := (xx1-x1[j-1])/(x1[j]-x1[j-1]);
t1 := (1 - t);
hj := x1[j] - x1[j-1];
t2 := t*t;
t12 := t1*t1;
si := y1[j-1]*t12*(1 + 2 * t);
s1 := y1[j]*t2*(3 - 2*t)+s1;
s1 := z1[j-1]*hj*t*t12 + s1;
s := s1-z1[j]*hj*t2*t1;
end;
Begin
xx := 1;
ind := 1;
WriteLn('Итерполирование функций с помощью кубического сплайна:');
For i := 1 to 19 do
Begin
Write('x=',xx:0:3,' ');
SPLINE(n,x,y,a,b,c,d,u,v,z,xx,s,ind);
WriteLn('y=',s:0:3);
xx := xx + 0.5;
end;
ReadLn;
End.





function New(n:integer;a,b:Vector;x:Real):real;
var i,j,k,f:integer; s,p:real; M:array [1..20,1..20] of real;
BEGIN
for i:=2 to n do m[1,i-1]:=b[i]-b[i-1];
for i:=2 to n-1 do
begin
f:=1;
for k:=i downto 2 do f:=f*k;
for j:=2 to n-i+1 do m[i,j-1]:=(m[i-1,j]-m[i-1,j-1])/f;
end;
if (a[n]-x)-(x-a[1])<0 then
begin
S:=b[n];
for i:=1 to N-1 do
begin
P:=1;
for j:=1 to i do P:=P*(x-a[n+1-j]);
s:=s+P*m[i,n-i];
end;
New:=s;
end
else
begin
S:=b[1];
for i:=1 to N-1 do
begin
P:=1;
for j:=1 to i do P:=P*(x-a[j]);
s:=s+P*m[i,1];
end;
New:=s
end;
END;