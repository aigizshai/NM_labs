Метод Ракитского (матричной экспоненты ).
Procedure M etR ak (n: Word; Var H: Real; A: MasReal;
var Y: vector; Var Q: MasReal; Ind, nts: Integer);
Входныепараметры:
n - размерность систем  ;
A - матрица коэффициентов систем ы типа
Mas Real=array [1 ..2 ,1 ..2 ]o f real;
Н - шаг между точкам интегрирования;
Y - массив размерности n содержит решение системы на
предыдущем шаге;
Q - матрица размерности n*n содержит матричную экспоненту ;
ind - режим работы процедуры : 0 -вычисление матричной экспоненты , 1- вычисление очередного решения;
nts - номер шага.
Выходные параметры:
Y - массив размерности n содержит решение системы на текущем шаге;
Q - матрица размерности n*n содержит матричную экспоненту ;
Н - шаг между точкам интегрирования.
(Процедура и спользует следующие процедуры :
procedure M ulM a t (n: integer;a,b: masReal; var c: ma-
s Real); - перемнож ение матриц A и B размерности n *n , C-выходная матрица;
procedure M atnaV ec (n: integer;a: masReal; b: vector; var
c: vecto r); - ум ножение матрицы A на масси в(вектор)B , C-выходной массив;
procedure M ulConst(n: word; H:real; var B: m asReal ) ; -умножение матрицы A на число Н, В - выходная матрица.)
Пример. Решить задачу Коши для системы
'y i= -11*y1 + 9*y2
'у2 = 9*y1 -11*y2
при начальных условиях y j(0)= 1, y 2(0)=0.
Текст программы :
uses crt;
Type
masReal=array[1..2,1..2]of real;
vector=array[1..2]of real;
var
a1,f1,q1: masReal;
n,nts,ind:integer;
X,H:real;
Y0:vector;
{перемножение матриц размерности n*n A и B, C-выходная матрица}
procedure MulMat(n:integer;a,b:masReal;var c:masReal);
var i,j,k:byte;
begin
for i:=1 to n do
for j:=1 to n do
c[i,j]:=0;
for i:=1 to n do
for j:=1 to n do
for k:=1 to n do
c[i,j] :=c[i,j]+a[i,k] *b[k,j];
end;
{умножение матрицы A на массив(вектор)В, C-выходной массив }
procedure MatnaVec(n:integer;a:masReal;b:vector ;var c:vector);
var i,j,k:byte;
begin
for i:=1 to n do c[i]:=0;
for i:=1 to n do
for j:=1 to n do
c[i]:=c[i]+a[j,i]*b[j];
end;
{умножение матрицы A на число Н, В-выходной массив }
procedure MulConst(n:word;H:real;var B:masReal );
var i,j:integer;
begin
for i:=1 to n do
for j:=1 to n do
b[i,j]:=b[i,j]*h
end;
{процедура реализующая метод Ракитского }
Procedure MetRak(n:Word;Var H:Real;A:MasReal;var Y:vector;Var
Q:MasReal;Ind,nts:Integer);
{n -порядок системы
A -матрица коэффициентов системы;
Y -массив размерности n содержит решение системы
Q -матрица размерности n*n содержит матричную экспоненту
ind-режим работы процедуры: 0-вычисление матричной экспоненты
1-вычисление очередного решения
nts-номер шага
}
Var
RabMas1: MasReal; {рабочая матрица }
y0,y1,RabMas2: vector;{рабочие массивы}
S : Real;
i,j,k : Byte;
BEGIn
IF Ind=0 Then
Begin
{построение матрицы exp(Ah)}
{ вычисление нормы матрицы А}
S:=0;
For i := 1To n Do
For j := 1To n Do
S:=S+A[i,j]*A[i,j];
S:=Sqrt(S);
H:=0.1/S;
nts := 0;
for i:=1 to n do
for j:=1 to n do
Q[i,j]:=0;
mulconst(n,H,A);
for k:=5 downto 1do
begin
mulconst(n,1/k,Q);
{Q+E}
for i:=1 to n do
Q[i,i]:=Q[i,i]+1;
mulmat(n,Q,A,Rabmas 1);
Q:=Rabmas1;
end;
{Q+E}
for i:=1 to n do
Q[i,i]:=Q[i,i]+1;
{построение матрицы exp(AH)}
for i:=1 to n do
begin
for j:=1 to n do y0[j]:=0;
y0[i]:=1;
for j:=1 to round(0.1/H) do
begin
MatnaVec(n,Q,Y0,y1);
y0:=y1;
end;
for j:=1 to n do Rabmas1[j,i]:=y0[j];
end;
Q:=Rabmas1;
End;
{вычисление решения на очередном шаге}
IF nts > 0 Then
Begin
MatnaVec(n,Q,Y,RabMas2);
y:=RabMas2;
End;
End;
begin
clrscr;
n:=2;
{ввод матрицы системы}
a1[1,1]:=-11; a1[1,2]:= 9;
a1[2,1]:= 9; a1[2,2]:=-11;
{ввод начального приближения}
Y0[1]:=1; Y0[2]:=0;
x:=0;
Writeln(' x I Y1 I ' Y2 '); {вычисление матричной экспонеты}
MetRak(n,H,A1,Y0,Q1,0,nts); 
for nts:=1 to 21 do
begin {вычисление решения на данном шаге Х}
MetRak(n,H,A1,Y0,Q1,1,nts);
Writeln(x:2:2,' I ',Y0[1]:0,' I ', Y0[2]:0);
x:=x+0.1; end;end.